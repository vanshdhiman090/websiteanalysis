# -*- coding: utf-8 -*-
"""websiteanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FMUQifLKqD4KLmCvU_VjredOGcebhpUQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/data-export (1).csv')
df.columns=df.iloc[0]
df = df[1:]
df.reset_index(drop=True, inplace=True)
display(df.head())



# Ensure the column is string type before extracting the hour
df['Hour'] = df['Date + hour (YYYYMMDDHH)'].astype(str).str[-2:]

# Extract only the date part and format it
df['Date + hour (YYYYMMDDHH)'] = df['Date + hour (YYYYMMDDHH)'].astype(str).str[:8]
df['Date + hour (YYYYMMDDHH)'] = pd.to_datetime(df['Date + hour (YYYYMMDDHH)'], format='%Y%m%d').dt.strftime('%Y.%m.%d')


# Get the index of the 'Date + hour (YYYYMMDDHH)' column
date_hour_col_index = df.columns.get_loc('Date + hour (YYYYMMDDHH)')


hour_col = df.pop('Hour')
df.insert(date_hour_col_index + 1, 'Hour', hour_col)

display(df.head())

"""Changing the Columns name

"""

df.columns.values[0]= 'Channel_Group'
df.columns.values[1]= 'Date'


df.rename(columns={
    'Engaged sessions': 'Engaged_sessions',
    'Average engagement time per session': 'Average_engagement_time_per_session',
    'Engaged sessions per user': 'Engaged_sessions_per_user',
    'Events per session': 'Events_per_session',
    'Engagement rate': 'Engagement_rate',
    'Event count': 'Event_count'
}, inplace=True)

display(df.head())

print(df.info())

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'], format='%Y.%m.%d')

# Convert 'Hour' to numeric (as time format conversion can be complex)
df['Hour'] = pd.to_numeric(df['Hour'], errors='coerce')

# List of columns to convert to numeric
numeric_cols = ['Users', 'Sessions', 'Engaged_sessions', 'Average_engagement_time_per_session',
                'Engaged_sessions_per_user', 'Events_per_session', 'Engagement_rate', 'Event_count']

# Convert numeric columns
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

display(df.info())
display(df.head())

print(df.isnull().sum())

"""*What trends can you observe in website sessoins and users over the time ?*"""

# Aggregate sessions and users by hour
hourly_data = df.groupby('Hour')[['Sessions', 'Users']].sum().reset_index()

# Sort by hour to ensure the line chart is ordered correctly
hourly_data = hourly_data.sort_values(by='Hour')

# Create the line chart
plt.figure(figsize=(12, 6))

sns.lineplot(data=hourly_data, x='Hour', y='Sessions', marker='o', color='teal', label='Total Sessions')
sns.lineplot(data=hourly_data, x='Hour', y='Users', marker='o', color='orange', label='Total Users')


plt.title('Total Sessions and Users by Hour')
plt.xlabel('Hour of the Day')
plt.ylabel('Count')
plt.xticks(hourly_data['Hour'])
plt.grid(True)
plt.legend()
plt.show()

"""*Which marketing channels brought the high numbers of users ?*"""

# Aggregate users by channel group
users_by_channel = df.groupby('Channel_Group')['Users'].sum().reset_index()

# Sort the channels by total users in descending order
users_by_channel = users_by_channel.sort_values(by='Users', ascending=False)

# Create the bar chart
plt.figure(figsize=(8, 5))
sns.barplot(data=users_by_channel, x='Channel_Group', y='Users', palette='viridis')

plt.title('Total Users by Channel Group')
plt.xlabel('Channel Group')
plt.ylabel('Total Users')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Which channel has highest average engagement time  ?

*Which channel has highest average engagement time  ? *
"""

# Aggregate average engagement time by channel group
engagement_time_by_channel = df.groupby('Channel_Group')['Average_engagement_time_per_session'].mean().reset_index()

# Sort the channels by average engagement time in descending order
engagement_time_by_channel = engagement_time_by_channel.sort_values(by='Average_engagement_time_per_session', ascending=False)


plt.figure(figsize=(8, 5))
sns.barplot(data=engagement_time_by_channel, x='Channel_Group', y='Average_engagement_time_per_session', palette='plasma')

plt.title('Total Average Engagement Time by Channel Group')
plt.xlabel('Channel Group')
plt.ylabel('Average Engagement Time per Session (Seconds)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""*How does  channels are corelate with engagement rate ?*"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='Channel_Group', y='Engagement_rate', palette='viridis')

plt.title('Distribution of Engagement Rate by Channel Group')
plt.xlabel('Channel Group')
plt.ylabel('Engagement Rate')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



"""which channels has more engagement sessions comapred to non engagement sessions ?

"""

# Calculate non-engaged sessions
df['Non_engaged_sessions'] = df['Sessions'] - df['Engaged_sessions']

# Aggregate engaged and non-engaged sessions by channel group
sessions_by_channel = df.groupby('Channel_Group')[['Engaged_sessions', 'Non_engaged_sessions']].sum().reset_index()


sessions_melted = sessions_by_channel.melt(id_vars='Channel_Group', var_name='Session_Type', value_name='Total_Sessions')

# Create the bar chart
plt.figure(figsize=(12, 6))
sns.barplot(data=sessions_melted, x='Channel_Group', y='Total_Sessions', hue='Session_Type', palette='viridis')

plt.title('Total Engaged vs. Non-Engaged Sessions by Channel Group')
plt.xlabel('Channel Group')
plt.ylabel('Total Sessions')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



"""*Traffic by Hour and Channels*"""

# Aggregate sessions by Hour and Channel_Group
traffic_by_hour_channel = df.groupby(['Hour', 'Channel_Group'])['Sessions'].sum().reset_index()

# Pivot the data to create a matrix for the heatmap
heatmap_data = traffic_by_hour_channel.pivot_table(index='Hour', columns='Channel_Group', values='Sessions', fill_value=0)


plt.figure(figsize=(14, 8))
sns.heatmap(heatmap_data, annot=True, fmt='.0f', cmap='plasma')

plt.title('Traffic (Sessions) by Hour and Channel Group')
plt.xlabel('Channel Group')
plt.ylabel('Hour of the Day')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()



"""*Which Day is valuable for the website ?*"""

# Extract weekday from the 'Date' column
df['Weekday'] = df['Date'].dt.day_name()

# Define the order of the weekdays
weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Aggregate sessions by weekday
sessions_by_weekday = df.groupby('Weekday')['Sessions'].sum().reindex(weekday_order)

# Create the bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x=sessions_by_weekday.index, y=sessions_by_weekday.values, palette='viridis')

plt.title('Total Sessions by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Total Sessions')
plt.tight_layout()
plt.show()